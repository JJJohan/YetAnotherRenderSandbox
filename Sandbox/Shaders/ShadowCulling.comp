#version 460
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256) in;

layout (constant_id = 0) const uint cullingMode = 2; // 0 = paused, 1 = reset, 2 = frustum

layout(binding = 0) uniform FrameInfo
{
    mat4 viewProj;
    mat4 prevViewProj;
    mat4 view;
	vec4 viewPos;
	vec2 viewSize;
	vec2 jitter;
} frameInfo;

layout(binding = 1) uniform LightData
{
	vec4 cascadeSplits;
    mat4 cascadeMatrices[4];
	vec3 sunLightColor;
	float sunLightIntensity;
	vec3 sunLightDir;
	float padding;
} lightData;

struct Bounds
{
    vec3 center;
    float radius;
};

layout(std140, binding = 2) readonly buffer BoundsBuffer
{
	Bounds bounds[];
} boundsBuffer;

struct VkDrawIndexedIndirectCommand
{
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	int vertexOffset;
	uint firstInstance;
};

layout(std430, binding = 3) readonly buffer InIndirectBuffer
{
	uint count;
	VkDrawIndexedIndirectCommand commands[];
} inIndirectBuffer;

layout(std430, binding = 4) writeonly buffer ShadowIndirectBuffer
{
	uint counts[4];
	VkDrawIndexedIndirectCommand commands[];
} shadowIndirectBuffer;

/*bool is_in_frustum(in vec3 center, float radius, int cascadeIndex)
{
	bool visible = center.z * cullData.frustum[cascadeIndex][1] - abs(center.x) * cullData.frustum[cascadeIndex][0] > -radius;
	return visible && center.z * cullData.frustum[cascadeIndex][3] - abs(center.y) * cullData.frustum[cascadeIndex][2] > -radius;
}*/

void addDrawCommand(uint id, int cascadeIndex)
{
	uint idx = cascadeIndex * inIndirectBuffer.count + atomicAdd(shadowIndirectBuffer.counts[cascadeIndex], 1);
	shadowIndirectBuffer.commands[idx] = inIndirectBuffer.commands[id];
	shadowIndirectBuffer.commands[idx].firstInstance = id;
}

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (cullingMode == 0 || id >= inIndirectBuffer.count)
	{
		return;
	}

	if (cullingMode > 1)
	{
		vec3 center = boundsBuffer.bounds[id].center;
		float radius = boundsBuffer.bounds[id].radius;
		vec3 min = center - vec3(radius);
		vec3 max = center - vec3(radius);

		for (int i = 0; i < 4; ++i)
		{
			{
				addDrawCommand(id, i);
			}
		}
	}
	else
	{
		for (int i = 0; i < 4; ++i)
		{
			addDrawCommand(id, i);
		}
	}
}