#version 460
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256) in;

layout (constant_id = 0) const uint cullingMode = 2; // 0 = paused, 1 = reset, 2 = frustum

layout(binding = 0) uniform FrameInfo
{
    mat4 viewProj;
    mat4 prevViewProj;
    mat4 view;
	vec4 viewPos;
	vec2 viewSize;
	vec2 jitter;
} frameInfo;

struct Bounds
{
	vec3 center;
	float radius;
};

layout(std140, binding = 1) readonly buffer BoundsBuffer
{
	Bounds bounds[];
} boundsBuffer;

struct VkDrawIndexedIndirectCommand
{
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	int vertexOffset;
	uint firstInstance;
};

layout(std430, binding = 2) readonly buffer InIndirectBuffer
{
	uint count;
	VkDrawIndexedIndirectCommand commands[];
} inIndirectBuffer;

layout(std430, binding = 3) writeonly buffer ShadowIndirectBuffer
{
	uint count;
	VkDrawIndexedIndirectCommand commands[];
} shadowIndirectBuffer;

struct DrawCullData
{
	float P00, P11, znear, zfar; // symmetric projection parameters
	float frustum[4]; // data for left/right/top/bottom frustum planes
	float pyramidWidth, pyramidHeight; // depth pyramid size in texels
};

layout(push_constant) uniform constants
{
   DrawCullData cullData;
};

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool projectSphere(in vec3 C, float r, float znear, float P00, float P11, out vec4 aabb)
{
	if (C.z + r < znear)
		return false;

	vec2 cx = -C.xz;
	vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
	vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
	vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

	vec2 cy = -C.yz;
	vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
	vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
	vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

	aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
	aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

	return true;
}

bool is_in_frustum(in vec3 center, float radius)
{
	bool visible = center.z * cullData.frustum[1] - abs(center.x) * cullData.frustum[0] > -radius;
	return visible && center.z * cullData.frustum[3] - abs(center.y) * cullData.frustum[2] > -radius;
}

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (cullingMode == 0 || id >= inIndirectBuffer.count)
	{
		return;
	}

	bool visible = true;
	if (cullingMode > 1)
	{
		vec3 center = boundsBuffer.bounds[id].center;

		vec3 centerVS = (frameInfo.view * vec4(center, 1.0f)).xyz;
		float radius = boundsBuffer.bounds[id].radius;

		visible = is_in_frustum(centerVS, radius);
	}

	if (visible)
	{
		uint idx = atomicAdd(shadowIndirectBuffer.count, 1);
		shadowIndirectBuffer.commands[idx] = inIndirectBuffer.commands[id];
		shadowIndirectBuffer.commands[idx].firstInstance = id;
	}
}